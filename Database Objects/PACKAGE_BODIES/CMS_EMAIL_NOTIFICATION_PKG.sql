--------------------------------------------------------
--  DDL for Package Body CMS_EMAIL_NOTIFICATION_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS_ADMIN"."CMS_EMAIL_NOTIFICATION_PKG" AS

BODYTEXT VARCHAR2(4000);
LINKADDR VARCHAR2(500);
v_CRLF VARCHAR2(2):= CHR(13) || CHR(10);
APPURL VARCHAR2(500);
SENDEMAIL VARCHAR2(1):= 'N';
OVERRIDE VARCHAR2(1) := 'N';
DEVEMAIL VARCHAR2(500);


/* This should be declared at the top as other procedures will call this procedure */
 PROCEDURE EMAILSETTING
  AS
  BEGIN
        SELECT APP_URL, SEND_EMAIL,OVERRIDE_CURRENT,ALTERNATE_EMAIL  INTO APPURL,SENDEMAIL,OVERRIDE,DEVEMAIL
        FROM CMS_EMAILSETTINGS WHERE IS_ACTIVE='Y' AND ROWNUM = 1 AND COMPONENT='CMS';
  END EMAILSETTING;

  PROCEDURE CMS_EMAIL_PROC
  (
    PI_OBJECT_ID IN CMS_DELIVERABLE.DELIVERABLE_ID%TYPE,
    PI_EMAIL_ID IN CMS_EMAIL_TYPE.EMAIL_ID%TYPE,
    PI_SO_ID IN VARCHAR2,
    PO_RETURN_CODE OUT NUMBER
  ) AS
  L_COMPOSITE_KEY VARCHAR2(200);
  L_TO_ID VARCHAR2(1000);
  L_CC_ID VARCHAR2(1000);
  L_TO VARCHAR2(4000);
  L_CC VARCHAR2(4000);
  L_BCC VARCHAR2(4000);
  L_QMAIL_ID NUMBER;
  L_FROM CMS_EMAIL_TYPE.EMAIL_FROM%TYPE;
  L_SUBJECT CMS_EMAIL_TYPE.EMAIL_SUBJECT%TYPE;
  L_HTML CMS_EMAIL_TYPE.IS_HTML%TYPE;
  L_TEMP VARCHAR2(1000);
  L_EMAIL_TYPE_ID CMS_EMAIL_TYPE.EMAIL_TYPE_ID%TYPE;
  L_LINKPAGE VARCHAR2(500);
  L_COUNT NUMBER;
  L_RETURN_CODE NUMBER;
  L_RETURN_MSG VARCHAR2(500);
  L_TEMP_TO_ID VARCHAR2(100);
  L_SEND_EMAIL BOOLEAN := TRUE;

  CURSOR C_SSO IS
    SELECT PC.EPO FROM CMS_DELI_APPROVER_MAP MAPA, DW_PEOPLE_CURRENT PC, CMS_MANAGER MGR
    WHERE  MAPA.IS_ACTIVE='Y' AND MGR.MANAGER_ID = MAPA.APPROVER_ID AND MGR.SLAC_ID = PC.EMPLOYEE_ID AND MAPA.DELIVERABLE_ID=PI_OBJECT_ID AND MGR.IS_ACTIVE='Y';

  CURSOR C_SO IS
     SELECT PC.EPO FROM CMS_SOWN_DELI_MAP SOWN, DW_PEOPLE_CURRENT PC
    WHERE  IS_ACTIVE='Y' AND SOWN.SLAC_ID = PC.EMPLOYEE_ID AND ISOWNER='N' AND DELIVERABLE_ID=PI_OBJECT_ID;


  BEGIN
  L_TEMP := '';
  L_CC := NULL;
  L_TO := NULL;
  L_TO_ID := NULL;
  L_CC_ID := NULL;
  L_COMPOSITE_KEY := NULL;

 EMAILSETTING();
    SELECT EMAIL_FROM, EMAIL_SUBJECT, EMAIL_BODY, IS_HTML,EMAIL_TYPE_ID,EMAIL_CC,EMAIL_TO INTO
      L_FROM, L_SUBJECT,BODYTEXT, L_HTML, L_EMAIL_TYPE_ID,L_CC,L_TO FROM CMS_EMAIL_TYPE WHERE EMAIL_ID = PI_EMAIL_ID;

      /* Test
       SELECT COUNT(*) INTO L_COUNT FROM VW_CMS_DELIVERABLE_DETAILS WHERE TO_CHAR(DELIVERABLE_ID) = TO_CHAR(PI_OBJECT_ID);
            IF L_COUNT > 0 THEN
                SELECT COMPOSITE_KEY,OWNERID INTO L_COMPOSITE_KEY,L_CC_ID  FROM VW_CMS_DELIVERABLE_DETAILS WHERE DELIVERABLE_ID = PI_OBJECT_ID;
            ELSE
              L_COMPOSITE_KEY := PI_OBJECT_ID || '-' || L_COUNT || '-' || 'TEST';
              L_CC_ID := '312150';
            END IF;
            end TEst */
     IF (PI_EMAIL_ID = 1) THEN
       /* New Deliverable submitted and owner identified*/
       /*To - Owner,  CC - CMA */
       /* Replace variables <COMPOSITEKEY> */
       SELECT COMPOSITE_KEY,OWNERID INTO L_COMPOSITE_KEY, L_TO_ID  FROM VW_CMS_DELIVERABLE_DETAILS WHERE DELIVERABLE_ID = PI_OBJECT_ID;
       L_LINKPAGE := 'Deliverable.aspx?mode=view' || '&' || 'id=' || PI_OBJECT_ID;


     ELSIF (PI_EMAIL_ID=3) THEN
      /*Owner is changed */
      /*To-Previous owner, CC- current owner*/
      /*Modified on 8/30 - swapped TO and CC , added Subowners
      /*To - New owner, CC-previous owner, subowner */
     /* Replace - <COMPOSITEKEY>*/
        SELECT COUNT(*) INTO L_COUNT FROM CMS_SOWN_DELI_MAP WHERE DELIVERABLE_ID = PI_OBJECT_ID AND ISOWNER='Y' AND IS_ACTIVE='N';
        IF L_COUNT > 0 THEN
            /* We know for sure it is not a new deliverable */
            SELECT SLAC_ID INTO L_TEMP_TO_ID FROM CMS_SOWN_DELI_MAP WHERE SUBOWNER_ID = (SELECT MAX(SUBOWNER_ID) FROM CMS_SOWN_DELI_MAP WHERE DELIVERABLE_ID = PI_OBJECT_ID AND ISOWNER='Y' AND IS_ACTIVE='N');
            IF L_TEMP_TO_ID <> PI_SO_ID THEN
                  OPEN C_SO;
               L_TEMP := '';
               LOOP
                    FETCH C_SO INTO L_TEMP; EXIT WHEN C_SO %NOTFOUND;
                    IF L_CC IS NULL THEN
                      L_CC := L_TEMP;
                    ELSE
                      L_CC := L_CC || ';' || L_TEMP;
                    END IF;
               END LOOP;
               CLOSE C_SO;
              SELECT COMPOSITE_KEY INTO L_COMPOSITE_KEY FROM VW_CMS_DELIVERABLE_DETAILS WHERE DELIVERABLE_ID = PI_OBJECT_ID;
              L_TO_ID := PI_SO_ID;
              L_CC_ID := L_TEMP_TO_ID;
              L_LINKPAGE := 'Deliverable.aspx?mode=view' || '&' || 'id=' || PI_OBJECT_ID;
            ELSE
              L_TO_ID := NULL;
              L_SEND_EMAIL := FALSE;
            END IF;
        END IF;

     ELSIF (PI_EMAIL_ID = 4 OR PI_EMAIL_ID=5) THEN
      /*Deliverable Submitted - Information only or for Approval*/
      /*To - Approvers of deliverable, CC-CMA, Owner*/
      /* Replace - <COMPOSITEKEY> */
       OPEN C_SSO;
       L_TEMP := '';
       LOOP
            FETCH C_SSO INTO L_TEMP; EXIT WHEN C_SSO %NOTFOUND;
            IF L_TO IS NULL THEN
              L_TO := L_TEMP;
            ELSE
              L_TO := L_TO || ';' || L_TEMP;
            END IF;
       END LOOP;
       CLOSE c_SSO;
        SELECT COMPOSITE_KEY,OWNERID INTO L_COMPOSITE_KEY, L_CC_ID FROM VW_CMS_DELIVERABLE_DETAILS WHERE DELIVERABLE_ID = PI_OBJECT_ID;
        L_LINKPAGE := 'Default.aspx'; --To the SSO Dashboard
     ELSIF (PI_EMAIL_ID=6 OR PI_EMAIL_ID= 7 OR PI_EMAIL_ID =9) THEN
     /*Deliverable approved,Re-opened or Modified*/
     /*To - Owner, CC-CMA, Subowners*/
     /*Replace - <COMPOSITEKEY>*/
     OPEN C_SO;
       L_TEMP := '';
       LOOP
            FETCH C_SO INTO L_TEMP; EXIT WHEN C_SO %NOTFOUND;
            IF L_CC IS NULL THEN
              L_CC := L_TEMP;
            ELSE
              L_CC := L_CC || ';' || L_TEMP;
            END IF;
       END LOOP;
       CLOSE C_SO;
       SELECT COMPOSITE_KEY,OWNERID INTO L_COMPOSITE_KEY, L_TO_ID FROM VW_CMS_DELIVERABLE_DETAILS WHERE DELIVERABLE_ID = PI_OBJECT_ID;
       L_LINKPAGE := 'Deliverable.aspx?mode=view' || '&' || 'id=' || PI_OBJECT_ID;
     ELSIF (PI_EMAIL_ID = 8) THEN
      /* File Attached*/
      /* CM Office*/
      /* Replace - <COMPOSITEKEY>*/
      SELECT COMPOSITE_KEY INTO L_COMPOSITE_KEY FROM VW_CMS_DELIVERABLE_DETAILS WHERE DELIVERABLE_ID = PI_OBJECT_ID;
      L_LINKPAGE := 'Deliverable.aspx?mode=view' || '&' || 'id=' || PI_OBJECT_ID;
     ELSIF (PI_EMAIL_ID=13) THEN
      /* File Attached by Subowner */
      /* To - Owner, CC-CMA */
      
     SELECT OWNERID INTO L_TO_ID FROM VW_CMS_DELIVERABLE_DETAILS WHERE DELIVERABLE_ID= PI_OBJECT_ID;
     L_LINKPAGE := 'Deliverable.aspx?mode=view' || '&' || 'id=' || PI_OBJECT_ID;

     END IF;

        IF L_TO IS NULL THEN
          L_TO := GETEPO(L_TO_ID);
        ELSE
          L_TO := L_TO || ';' || GETEPO(L_TO_ID);
        END IF;



         IF L_CC IS NULL THEN
            L_CC := GETEPO(L_CC_ID);
         ELSE
            L_CC := L_CC || ';' || GETEPO(L_CC_ID);
         END IF;



    REPLACE_PLACEHOLDERS(L_COMPOSITE_KEY);

    BODYTEXT := BODYTEXT || V_CRLF || V_CRLF || APPURL || L_LINKPAGE;
   IF L_TO IS NOT NULL THEN
      L_TO := QM_EMAIL_PKG.FIX_EMAIL_ADDRESSES(L_TO);
      L_CC := QM_EMAIL_PKG.FIX_EMAIL_ADDRESSES(L_CC);
     QM_EMAIL_PKG.SEND_EMAIL('CMS','CMS_EMAIL_PROC',L_FROM,L_TO,L_CC,L_BCC,L_SUBJECT, BODYTEXT,L_HTML,SENDEMAIL,L_QMAIL_ID);
     
      INSERT INTO CMS_EMAIL_HISTORY(EMAIL_TYPE_ID,SEQ_NOTE,ORIGINAL_TABLE,ORIGINAL_ID,CREATED_ON,QMAIL_ID)
        VALUES(L_EMAIL_TYPE_ID,L_SUBJECT,'CMS_EMAIL_PROC', PI_OBJECT_ID,SYSDATE, L_QMAIL_ID);
        PO_RETURN_CODE := 0;
    ELSE
           IF L_SEND_EMAIL THEN
              INSERT INTO CMS_EMAIL_HISTORY(EMAIL_TYPE_ID,SEQ_NOTE,ORIGINAL_TABLE,ORIGINAL_ID,CREATED_ON,QMAIL_ID)
              VALUES(l_EMAIL_TYPE_ID,l_SUBJECT || 'Err: To address is null','CMS_EMAIL_PROC',pi_OBJECT_ID,SYSDATE,NULL);

               PO_RETURN_CODE:=-20002;
          ELSE
                PO_RETURN_CODE := 0;
          END IF;
    END IF;
    L_RETURN_CODE := PI_OBJECT_ID;
  EXCEPTION
      WHEN OTHERS THEN
          PO_RETURN_CODE := SQLCODE;
          L_RETURN_MSG:= SQLERRM;
          INSERT INTO CMS_EMAIL_HISTORY(EMAIL_TYPE_ID,SEQ_NOTE,ORIGINAL_TABLE,ORIGINAL_ID,CREATED_ON,QMAIL_ID)
          VALUES(L_EMAIL_TYPE_ID,L_RETURN_MSG,'ERR:CMS_EMAIL_PROC',PI_OBJECT_ID,SYSDATE,NULL);

  END CMS_EMAIL_PROC;

    PROCEDURE CMS_EMAIL_SUBOWNERS_PROC
  (
    PI_OBJECT_ID IN CMS_DELIVERABLE.DELIVERABLE_ID%TYPE,
    PI_EMAIL_ID IN CMS_EMAIL_TYPE.EMAIL_ID%TYPE,
    PI_SO_ID IN VARCHAR2,
    PI_COMPOSITE_KEY IN VARCHAR2,
    PI_OWNERID IN VARCHAR2,
    PO_RETURN_CODE OUT NUMBER
  ) AS
  L_COMPOSITE_KEY VARCHAR2(200);
  L_TO_ID VARCHAR2(1000);
  L_CC_ID VARCHAR2(1000);
  L_TO VARCHAR2(4000);
  L_CC VARCHAR2(4000);
  L_BCC VARCHAR2(4000);
  L_QMAIL_ID NUMBER;
  L_FROM CMS_EMAIL_TYPE.EMAIL_FROM%TYPE;
  L_SUBJECT CMS_EMAIL_TYPE.EMAIL_SUBJECT%TYPE;
  L_HTML CMS_EMAIL_TYPE.IS_HTML%TYPE;
  L_TEMP VARCHAR2(1000);
  L_EMAIL_TYPE_ID CMS_EMAIL_TYPE.EMAIL_TYPE_ID%TYPE;
  L_LINKPAGE VARCHAR2(500);

  L_RETURN_CODE NUMBER;
  L_RETURN_MSG VARCHAR2(500);
  BEGIN
  L_CC := NULL;
  L_TO := NULL;
  L_TO_ID := NULL;
  L_CC_ID := NULL;

  EMAILSETTING();
  SELECT EMAIL_FROM, EMAIL_SUBJECT, EMAIL_BODY, IS_HTML,EMAIL_TYPE_ID,EMAIL_CC,EMAIL_TO INTO
      L_FROM, L_SUBJECT,BODYTEXT, L_HTML, L_EMAIL_TYPE_ID,L_CC,L_TO FROM CMS_EMAIL_TYPE WHERE EMAIL_ID = PI_EMAIL_ID;

      IF (PI_EMAIL_ID = 2) THEN
          L_TO_ID := PI_SO_ID;
          L_CC_ID := PI_OWNERID;
          L_COMPOSITE_KEY :=PI_COMPOSITE_KEY;
          L_LINKPAGE  := 'Deliverable.aspx?mode=view' || '&' || 'id=' || PI_OBJECT_ID;

      END IF;

        IF L_TO IS NULL THEN
          L_TO := GETEPO(L_TO_ID);
        ELSE
          L_TO := L_TO || ';' || GETEPO(L_TO_ID);
        END IF;



         IF L_CC IS NULL THEN
            L_CC := GETEPO(L_CC_ID);
         ELSE
            L_CC := L_CC || ';' || GETEPO(L_CC_ID);
         END IF;



    REPLACE_PLACEHOLDERS(L_COMPOSITE_KEY);

    BODYTEXT := BODYTEXT || V_CRLF || V_CRLF || APPURL || L_LINKPAGE;
    IF L_TO IS NOT NULL THEN
      L_TO := QM_EMAIL_PKG.FIX_EMAIL_ADDRESSES(L_TO);
      L_CC := QM_EMAIL_PKG.FIX_EMAIL_ADDRESSES(L_CC);
      QM_EMAIL_PKG.SEND_EMAIL('CMS','CMS_EMAIL_SUBOWNERS_PROC',L_FROM,L_TO,L_CC,L_BCC,L_SUBJECT, BODYTEXT,L_HTML,SENDEMAIL,L_QMAIL_ID);

      INSERT INTO CMS_EMAIL_HISTORY(EMAIL_TYPE_ID,SEQ_NOTE,ORIGINAL_TABLE,ORIGINAL_ID,CREATED_ON,QMAIL_ID)
        VALUES(L_EMAIL_TYPE_ID,L_SUBJECT,'CMS_EMAIL_SUBOWNERS_PROC', PI_OBJECT_ID,SYSDATE, L_QMAIL_ID);
        PO_RETURN_CODE := 0;

    ELSE
      INSERT INTO CMS_EMAIL_HISTORY(EMAIL_TYPE_ID,SEQ_NOTE,ORIGINAL_TABLE,ORIGINAL_ID,CREATED_ON,QMAIL_ID)
        VALUES(l_EMAIL_TYPE_ID,l_SUBJECT || 'Err: To address is null','CMS_EMAIL_SUBOWNERS_PROC',pi_OBJECT_ID,SYSDATE,NULL);

         PO_RETURN_CODE:=-20002;

    END IF;


  EXCEPTION
    WHEN OTHERS THEN
          PO_RETURN_CODE := SQLCODE;
          L_RETURN_MSG:= SQLERRM;
          INSERT INTO CMS_EMAIL_HISTORY(EMAIL_TYPE_ID,SEQ_NOTE,ORIGINAL_TABLE,ORIGINAL_ID,CREATED_ON,QMAIL_ID)
          VALUES(L_EMAIL_TYPE_ID,L_RETURN_MSG,'ERR:CMS_EMAIL_SUBOWNERS_PROC',PI_OBJECT_ID,SYSDATE,NULL);

  END CMS_EMAIL_SUBOWNERS_PROC;

  FUNCTION GETEPO(ADDR VARCHAR2) RETURN VARCHAR2 AS
  L_TEMPADDR VARCHAR2(100);
  BEGIN
   IF ADDR IS NOT NULL THEN
      IF (ISVALID_SLACID(ADDR)) THEN
        SELECT EPO INTO L_TEMPADDR FROM DW_PEOPLE_CURRENT WHERE EMPLOYEE_ID=ADDR;
        RETURN L_TEMPADDR;
      ELSE
        RETURN NULL;
      END IF;
  ELSE
      RETURN NULL;
   END IF;

  END GETEPO;

  PROCEDURE REPLACE_PLACEHOLDERS (
     PI_COMPOSITE_KEY IN VARCHAR2
     )
     is

     BEGIN
      BodyText :=  replace(
                          BODYTEXT,
                         '<COMPOSITEKEY>',PI_COMPOSITE_KEY);
     END;

       PROCEDURE GETSUBOWNERS
  (
  PI_DELIID IN CMS_DELIVERABLE.DELIVERABLE_ID%TYPE,
  PO_SOLIST OUT VARCHAR2
  )
  AS
  L_SO_LIST VARCHAR2(3000);
  L_SO_ID NUMBER;
  L_SO_EMAIL VARCHAR2(100);

  CURSOR C_SUBOWNERS IS
    SELECT SLAC_ID FROM VW_CMS_SOWNDELI_MAP_DETAILS WHERE DELIVERABLE_ID = PI_DELIID AND ISOWNER='N';

  BEGIN
       OPEN C_SUBOWNERS;

       LOOP


          FETCH C_SUBOWNERS INTO L_SO_ID;EXIT WHEN C_SUBOWNERS %NOTFOUND;
          IF L_SO_ID IS NOT NULL THEN
                SELECT EPO INTO L_SO_EMAIL FROM DW_PEOPLE_CURRENT WHERE EMPLOYEE_ID = L_SO_ID;
          END IF;
          IF L_SO_EMAIL IS NOT NULL THEN
            IF L_SO_LIST IS NOT NULL THEN
               L_SO_LIST := L_SO_LIST || ';' || L_SO_EMAIL;
            ELSE
               L_SO_LIST := L_SO_EMAIL;
            END IF;
          END IF;
          END LOOP;
          CLOSE C_SUBOWNERS;
        
          PO_SOLIST := L_SO_LIST;
  END;
  
  PROCEDURE GETSUBOWNERSNAME
  (
    PI_DELIID IN CMS_DELIVERABLE.DELIVERABLE_ID%TYPE,
    PO_SOLIST_NAME OUT VARCHAR2
  )
  AS
  L_SO_LIST_NAME VARCHAR2(600);
  L_SO_ID NUMBER;
  L_SO_NAME VARCHAR2(70);
  
  CURSOR C_SUBOWNERS1 IS
    SELECT SLAC_ID FROM VW_CMS_SOWNDELI_MAP_DETAILS WHERE DELIVERABLE_ID = PI_DELIID AND ISOWNER='N';
    
  BEGIN
    OPEN C_SUBOWNERS1;
    LOOP
      FETCH C_SUBOWNERS1 INTO L_SO_ID; EXIT WHEN C_SUBOWNERS1 %NOTFOUND;
      IF L_SO_ID IS NOT NULL THEN
        SELECT INITCAP(FIRST_NAME || ' ' || LAST_NAME) INTO L_SO_NAME FROM DW_PEOPLE_CURRENT WHERE EMPLOYEE_ID=L_SO_ID;
      END IF;
      IF L_SO_NAME IS NOT NULL THEN
        IF L_SO_LIST_NAME IS NOT NULL THEN
        L_SO_LIST_NAME := L_SO_LIST_NAME  || '; ' || L_SO_NAME;
        ELSE
        L_SO_LIST_NAME := L_SO_NAME;
        END IF;
      END IF;
    END LOOP;
  CLOSE C_SUBOWNERS1;
    IF (L_SO_LIST_NAME = '' OR L_SO_LIST_NAME IS NULL) THEN
            L_SO_LIST_NAME := 'None';
          END IF;
  PO_SOLIST_NAME := L_SO_LIST_NAME;
  END;

  PROCEDURE CMS_EMAIL_REMINDERS_PROC
  AS
  L_OWNERID NUMBER;

  L_DELIVERABLE_ID NUMBER;
  L_DAYS NUMBER;
  L_DUE_DATE DATE;
  L_BODY VARCHAR2(5000); /*if it exceeds 5000, it must be declared as clob, or email will not be sent due to exception*/
  L_BODYHEAD VARCHAR2(1000);
  L_TO VARCHAR2(1000);
  L_CC VARCHAR2(5000);
  L_CC_1DAY VARCHAR2(5000);
  L_SUBJECT VARCHAR2(200);
  L_HTML VARCHAR2(5);
  L_FROM VARCHAR2(50);
  L_NOTIFY_MGR CHAR(1);
  L_SUPERVISOR_ID VARCHAR2(50);
  L_SUPERVISOR_EMAIL VARCHAR2(100);
  L_EMAIL_TYPE_ID NUMBER;
  L_QMAIL_ID NUMBER;
  L_RETURN_CODE NUMBER;
  L_SUBJECT_1DAY VARCHAR2(200);
  L_BODY_1DAY VARCHAR2(1000);
  L_BODYTEXT_1DAY VARCHAR2(4000);
  L_RETURN_CODE1 NUMBER;
  L_COMPOSITE_KEY VARCHAR2(50);
  L_BODYHEAD_1DAY VARCHAR2(1000);
  L_SO_LIST VARCHAR2(5000);
  L_SO_LIST_1DAY VARCHAR2(5000);
  L_SO_LIST1 VARCHAR2(3000);
  L_SO_LIST1_1DAY VARCHAR2(3000);
  L_CC1 VARCHAR2(100);
  L_SO_LIST_NAME varchar2(600);
  L_DESCRIPTION VARCHAR2(4000);
  L_SO_NAME VARCHAR2(600);
  L_COUNT NUMBER;
  L_MORE_BODY VARCHAR2(400);

  
  CURSOR C_OWNER IS
    SELECT DISTINCT OWNERID FROM VW_CMS_DELIVERABLE_DETAILS
      WHERE STATUS_ID IN (1,2,5) AND DAYS IN (90,60,30,10,1);

  CURSOR C_DELIVERABLE IS
    SELECT DELIVERABLE_ID,COMPOSITE_KEY,DESCRIPTION FROM VW_CMS_DELIVERABLE_DETAILS
      WHERE OWNERID = L_OWNERID AND STATUS_ID IN (1,2,5) AND DAYS IN (90,60,30,10,1) ORDER BY DAYS;

  CURSOR C_ACTUALDEL IS SELECT DAYS, TO_CHAR(DUE_DATE,'dd-Mon-yy') as DUE_DATE,NOTIFY_MANAGER FROM VW_CMS_DELIVERABLE_DETAILS WHERE DAYS IN (SELECT (CASE WHEN LOOKUP_ID=8 THEN 90
      WHEN LOOKUP_ID=9 THEN 60
      WHEN LOOKUP_ID=10 THEN 30
      WHEN LOOKUP_ID=11 THEN 10
      WHEN LOOKUP_ID=12 THEN 1
      END) AS DAYS
      FROM VW_CMS_NOTIFY_MAP_DETAILS
      WHERE DELIVERABLE_ID = L_DELIVERABLE_ID) AND DELIVERABLE_ID = L_DELIVERABLE_ID;


    BEGIN
       
    EMAILSETTING();
      SELECT EMAIL_FROM, EMAIL_SUBJECT, EMAIL_BODY, IS_HTML,EMAIL_TYPE_ID,EMAIL_CC INTO
      L_FROM, L_SUBJECT,BODYTEXT, L_HTML, L_EMAIL_TYPE_ID,L_CC1 FROM CMS_EMAIL_TYPE WHERE EMAIL_ID = 10;
    
        LINKADDR := APPURL || 'Default.aspx';
        L_MORE_BODY := '<BR>IMPORTANT:  Please reference the assigned tracking number on EVERY document that you upload into SLACTrak.  If you have questions, please contact the Contract Management Office at 4240.' || '<BR><BR>' || 'Please click on the link below to open your SLACTrak dashboard.<BR>';
        OPEN C_OWNER;
        
        LOOP
          L_SO_LIST := NULL;
          L_SO_LIST_1DAY := NULL;
          L_CC := NULL;
          L_CC_1DAY := NULL;
         L_SO_NAME := NULL;
         
          
          FETCH C_OWNER INTO L_OWNERID; EXIT WHEN C_OWNER %NOTFOUND;
           
           
          IF L_OWNERID IS NOT NULL THEN
            L_BODY := NULL;
            L_BODY_1DAY := NULL;
            L_BODYHEAD := '<TABLE BORDER=1><TR><TD>SUBOWNER(S)</TD><TD>DUE IN DAYS</TD><TD>DUE DATE</TD><TD>DELIVERABLE</TD><TD>TRACKING NUMBER</TD></TR>';
            L_BODYHEAD_1DAY := '<TABLE BORDER=1><TR><TD>SUBOWNER(S)</TD><TD>DELIVERABLE</TD><TD>TRACKING NUMBER</TD></TR>';
            
            SELECT COUNT(*) INTO L_COUNT FROM DW_PEOPLE_CURRENT WHERE EMPLOYEE_ID = L_OWNERID;
            IF L_COUNT > 0 THEN
               SELECT EPO INTO L_TO FROM DW_PEOPLE_CURRENT WHERE EMPLOYEE_ID = L_OWNERID;
            ELSE
               L_TO := NULL;
            END IF;
           OPEN C_DELIVERABLE;
          LOOP
          
           FETCH C_DELIVERABLE INTO L_DELIVERABLE_ID,L_COMPOSITE_KEY,L_DESCRIPTION;EXIT
              WHEN C_DELIVERABLE %NOTFOUND;

             IF L_DELIVERABLE_ID IS NOT NULL THEN
              L_SO_LIST1 := NULL;
              L_SO_LIST1_1DAY := NULL;
              L_SO_LIST_NAME := NULL;
            
              OPEN C_ACTUALDEL;
               LOOP
                    
                       FETCH C_ACTUALDEL INTO L_DAYS,L_DUE_DATE,L_NOTIFY_MGR;EXIT WHEN C_ACTUALDEL %NOTFOUND;
                       GETSUBOWNERSNAME(L_DELIVERABLE_ID, L_SO_LIST_NAME);
    
                      L_SO_NAME := L_SO_LIST_NAME;
                                    
               
                      IF ((L_DAYS IS NOT NULL) AND (L_DAYS <> 1)) THEN
                        
                         L_BODY :=  L_BODY || '<TR><TD>' || l_so_name || '</TD><TD ALIGN=CENTER>'  || L_DAYS || '</TD><TD>' || L_DUE_DATE || '</TD><TD>' || L_DESCRIPTION  || '</TD><TD>' || L_COMPOSITE_KEY || '</TD></TR>';
                         
                         
                         GETSUBOWNERS(L_DELIVERABLE_ID,L_SO_LIST1);
                        
                         IF L_SO_LIST1 IS NOT NULL THEN
                         IF L_SO_LIST IS NOT NULL THEN
                            L_SO_LIST := L_SO_LIST || ';' || L_SO_LIST1;
                          ELSE
                            L_SO_LIST := L_SO_LIST1;
                          END IF;
                          END IF;
                       END IF;
                       
                        --If days is 1 and notify manager is yes, cc  the supervisor
                       
                        IF ((L_DAYS = 1) AND (L_NOTIFY_MGR = 'Y')) THEN
                              L_SUPERVISOR_EMAIL := NULL;
                              
                               L_BODY_1DAY := L_BODY_1DAY || '<TR><TD>' || l_so_name || '</TD><TD>' || L_DESCRIPTION || '</TD><TD>' || L_COMPOSITE_KEY  || '</TD></TR>' ;
                               SELECT EMAIL_SUBJECT, EMAIL_BODY INTO L_SUBJECT_1DAY, L_BODYTEXT_1DAY FROM CMS_EMAIL_TYPE WHERE EMAIL_ID=11;
                              IF L_OWNERID IS NOT NULL THEN
                                  SELECT SUPERVISOR_ID INTO L_SUPERVISOR_ID FROM DW_PEOPLE_CURRENT WHERE EMPLOYEE_ID = L_OWNERID;
                              END IF;
                              IF L_SUPERVISOR_ID IS NOT NULL THEN
                                  SELECT EPO INTO L_SUPERVISOR_EMAIL FROM DW_PEOPLE_CURRENT WHERE EMPLOYEE_ID = L_SUPERVISOR_ID;
                              END IF;
                             GETSUBOWNERS(L_DELIVERABLE_ID,L_SO_LIST1_1DAY);

                               IF L_SO_LIST1_1DAY IS NOT NULL THEN
                                  IF L_SO_LIST_1DAY IS NOT NULL THEN
                                      L_SO_LIST_1DAY := L_SO_LIST || ';' || L_SO_LIST1_1DAY;
                                  ELSE
                                      L_SO_LIST_1DAY := L_SO_LIST1_1DAY;
                                  END IF;
                               END IF;
                        END IF;
               END LOOP;

                  CLOSE C_ACTUALDEL;


                END IF;
            END LOOP;
                
            IF (L_BODY IS NOT NULL) THEN
            
              IF L_SO_LIST IS NOT NULL THEN
                 L_CC := L_CC || ';' || L_CC1 || ';' || L_SO_LIST;
              END IF;
           
            IF L_TO IS NOT NULL THEN
             
              L_TO := QM_EMAIL_PKG.FIX_EMAIL_ADDRESSES(L_TO);
              L_CC := QM_EMAIL_PKG.FIX_EMAIL_ADDRESSES(L_CC);
            
              
              L_BODY := BODYTEXT || V_CRLF || V_CRLF ||  L_BODYHEAD || L_BODY || '</TABLE>' || V_CRLF || V_CRLF || L_MORE_BODY || LINKADDR;
        
            /* DBMS_OUTPUT.PUT_LINE('to' || ':' || L_TO );
              DBMS_OUTPUT.PUT_LINE('cc' || ':' || L_CC );
              DBMS_OUTPUT.PUT_LINE( V_CRLF || '--------------');*/
            
            
            --QM_EMAIL_PKG.SEND_EMAIL('CMS','CMS_EMAIL_REMINDERS_PROC',L_FROM,'mswami@slac.stanford.edu', '' ,'',L_SUBJECT,L_BODY,L_HTML,'Y',L_QMAIL_ID);
             QM_EMAIL_PKG.SEND_EMAIL('CMS','CMS_EMAIL_REMINDERS_PROC',l_FROM,L_TO, L_CC ,'',l_SUBJECT,l_BODY,L_HTML,SENDEMAIL,l_QMAIL_ID);
                INSERT INTO CMS_EMAIL_HISTORY(EMAIL_TYPE_ID,SEQ_NOTE,ORIGINAL_TABLE,ORIGINAL_ID,CREATED_ON,QMAIL_ID)
                VALUES(l_EMAIL_TYPE_ID,l_SUBJECT,'CMS_EMAIL_REMINDERS_PROC',L_OWNERID,SYSDATE,l_QMAIL_ID);
             ELSE
               INSERT INTO CMS_EMAIL_HISTORY(EMAIL_TYPE_ID,SEQ_NOTE,ORIGINAL_TABLE,ORIGINAL_ID,CREATED_ON,QMAIL_ID)
                  VALUES(l_EMAIL_TYPE_ID,l_SUBJECT || 'Error:No To address','CMS_EMAIL_REMINDERS_PROC',L_OWNERID,SYSDATE,NULL);
              END IF;
            END IF;
            
            
            /* Send one DAY Reminder separate from the one above */

              IF (L_BODY_1DAY IS NOT NULL) THEN
                  IF (L_SUPERVISOR_EMAIL IS NOT NULL) THEN
                      L_CC_1DAY := L_CC_1DAY || ';' || L_CC1 || ';' || L_SUPERVISOR_EMAIL;
                  END IF;
                   IF L_SO_LIST_1DAY IS NOT NULL THEN
                      L_CC_1DAY := L_CC_1DAY || ';' || L_SO_LIST_1DAY;
                   END IF;
                 
              IF L_TO IS NOT NULL THEN
              
                  L_TO := QM_EMAIL_PKG.FIX_EMAIL_ADDRESSES(L_TO);
                   L_CC_1DAY := QM_EMAIL_PKG.FIX_EMAIL_ADDRESSES(L_CC_1DAY);
                   L_BODY_1DAY := L_BODYTEXT_1DAY || V_CRLF || V_CRLF || L_BODYHEAD_1DAY || L_BODY_1DAY || '</TABLE>' || V_CRLF || V_CRLF || L_MORE_BODY || LINKADDR;

                 /* DBMS_OUTPUT.PUT_LINE('to1' || ':' || L_TO );
                   DBMS_OUTPUT.PUT_LINE('cc1' || ':' || L_CC_1DAY );
                   DBMS_OUTPUT.PUT_LINE( V_CRLF || '--------------');*/
                   
                   -- QM_EMAIL_PKG.SEND_EMAIL('CMS','CMS_EMAIL_REMINDERS_PROC',L_FROM,'mswami@slac.stanford.edu', '' ,'',L_SUBJECT_1DAY,L_BODY_1DAY,L_HTML,'Y',L_QMAIL_ID);
                      QM_EMAIL_PKG.SEND_EMAIL('CMS','CMS_EMAIL_REMINDERS_PROC',l_FROM,l_TO, L_CC_1DAY ,'',l_SUBJECT_1DAY,L_BODY_1DAY,L_HTML,SENDEMAIL,l_QMAIL_ID);
                      INSERT INTO CMS_EMAIL_HISTORY(EMAIL_TYPE_ID,SEQ_NOTE,ORIGINAL_TABLE,ORIGINAL_ID,CREATED_ON,QMAIL_ID)
                      VALUES(l_EMAIL_TYPE_ID,l_SUBJECT_1DAY,'CMS_EMAIL_REMINDERS_PROC',L_OWNERID,SYSDATE,l_QMAIL_ID);
                   ELSE
                     INSERT INTO CMS_EMAIL_HISTORY(EMAIL_TYPE_ID,SEQ_NOTE,ORIGINAL_TABLE,ORIGINAL_ID,CREATED_ON,QMAIL_ID)
                        VALUES(L_EMAIL_TYPE_ID,l_SUBJECT_1DAY || 'Error:No To address','CMS_EMAIL_REMINDERS_PROC',L_OWNERID,SYSDATE,NULL);
                    END IF;
               END IF;
            CLOSE C_DELIVERABLE;
          END IF;
        END LOOP;
        CLOSE C_OWNER;

EXCEPTION
    WHEN OTHERS THEN
      L_RETURN_CODE := SQLCODE;
       INSERT INTO CMS_EMAIL_HISTORY(EMAIL_TYPE_ID,SEQ_NOTE,ORIGINAL_TABLE,ORIGINAL_ID,CREATED_ON,QMAIL_ID)
                  VALUES(l_EMAIL_TYPE_ID,L_RETURN_CODE,'CMS_EMAIL_REMINDERS_PROC',L_OWNERID,SYSDATE,NULL);
END CMS_EMAIL_REMINDERS_PROC;

PROCEDURE CMS_EMAIL_REMINDER_DELIV_PROC
AS
L_TO VARCHAR2(1000);
L_CC VARCHAR2(1000);
L_SUBJECT VARCHAR2(200);
L_FROM VARCHAR2(50);
L_HTML VARCHAR2(5);
L_EMAIL_TYPE_ID NUMBER;
L_QMAIL_ID NUMBER;
L_BODY VARCHAR2(1000);
L_HEAD VARCHAR2(500);
L_REQUIREMENT_ID NUMBER;
L_REQUIREMENT VARCHAR2(1000);
L_EMAILSENTFOR VARCHAR2(50);
L_ERRORMSG NUMBER;
L_COUNT NUMBER;
L_REQID NUMBER;
L_EMAILSENT BOOLEAN;
L_COUNT1 NUMBER;

CURSOR C_REQUIREMENT IS
  SELECT REQUIREMENT_ID, REQUIREMENT FROM VW_CMS_REQUIREMENT_DETAILS WHERE TRUNC(START_DATE) - TRUNC(SYSDATE) = 0;

CURSOR C_REQUIREMENT_1 IS
  SELECT REQUIREMENT_ID FROM VW_CMS_REQUIREMENT_DETAILS WHERE TRUNC(START_DATE) - TRUNC(SYSDATE) = 0;

  BEGIN
  L_BODY := NULL;
  L_EMAILSENT := FALSE;

      EMAILSETTING();
      SELECT EMAIL_FROM, EMAIL_SUBJECT, EMAIL_BODY, IS_HTML,EMAIL_TYPE_ID,EMAIL_CC,EMAIL_TO INTO
      L_FROM, L_SUBJECT,BODYTEXT, L_HTML, L_EMAIL_TYPE_ID,L_CC,L_TO FROM CMS_EMAIL_TYPE WHERE EMAIL_ID = 12;

      LINKADDR := APPURL || 'Deliverable.aspx?mode=add';
      L_HEAD := '<TABLE BORDER=1><TR><TD> Requirement </TD><TD> Requirement Id </TD>';
      OPEN C_REQUIREMENT;
      LOOP
        FETCH C_REQUIREMENT INTO L_REQUIREMENT_ID,L_REQUIREMENT; EXIT WHEN C_REQUIREMENT %NOTFOUND;
        SELECT COUNT(*) INTO L_COUNT FROM CMS_DELIVERABLE WHERE REQUIREMENT_ID=L_REQUIREMENT_ID AND IS_ACTIVE='Y';

        IF L_COUNT <= 0 THEN
          IF L_REQUIREMENT_ID IS NOT NULL THEN
              L_BODY := L_BODY || '<TR><TD>' || L_REQUIREMENT || '</TD><TD>' || L_REQUIREMENT_ID || '</TD></TR>';
              --L_EMAILSENTFOR := L_EMAILSENTFOR || L_REQUIREMENT_ID || ',';
          END IF;
        END IF;

       END LOOP;

      -- IF L_EMAILSENTFOR IS NOT NULL THEN
      -- L_EMAILSENTFOR := TRIM(TRAILING ',' FROM L_EMAILSENTFOR);
      -- L_EMAILSENTFOR := ')';
      -- END IF;
       IF(L_BODY IS NOT NULL) THEN
          BODYTEXT := BODYTEXT || V_CRLF || V_CRLF || L_HEAD || L_BODY || '</TABLE>' || V_CRLF || V_CRLF || LINKADDR;
          IF L_TO IS NOT NULL THEN
                QM_EMAIL_PKG.SEND_EMAIL('CMS','CMS_EMAIL_REMINDER_DELIV_PROC',l_FROM,L_TO, l_CC ,'',l_SUBJECT,BODYTEXT,L_HTML,SENDEMAIL,l_QMAIL_ID);
                INSERT INTO CMS_EMAIL_HISTORY(EMAIL_TYPE_ID,SEQ_NOTE,ORIGINAL_TABLE,ORIGINAL_ID,CREATED_ON,QMAIL_ID)
                VALUES(L_EMAIL_TYPE_ID,L_SUBJECT,'CMS_EMAIL_REMINDER_DELIV_PROC',0,SYSDATE,L_QMAIL_ID);
                L_EMAILSENT := TRUE;
          ELSE
               INSERT INTO CMS_EMAIL_HISTORY(EMAIL_TYPE_ID,SEQ_NOTE,ORIGINAL_TABLE,ORIGINAL_ID,CREATED_ON,QMAIL_ID)
                  VALUES(L_EMAIL_TYPE_ID,L_SUBJECT || 'Error:No To address','CMS_EMAIL_REMINDER_DELIV_PROC',0,SYSDATE,NULL);
                L_EMAILSENT := FALSE;
          END IF;
          --mark the email sent to the corresponding requirements
         --DBMS_OUTPUT.PUT_LINE(L_EMAILSENTFOR);
         IF L_EMAILSENT = TRUE THEN
         OPEN C_REQUIREMENT_1;
         LOOP
         FETCH C_REQUIREMENT_1 INTO L_REQID;EXIT WHEN C_REQUIREMENT_1 %NOTFOUND;
              SELECT COUNT(*) INTO L_COUNT1 FROM CMS_DELIVERABLE WHERE REQUIREMENT_ID=L_REQID;

          IF L_COUNT1 <= 0 THEN
             UPDATE CMS_REQUIREMENT SET IS_CM_NOTIFIED='Y', NOTIFIED_DATE=SYSDATE WHERE REQUIREMENT_ID = L_REQID;
          END IF;
         END LOOP;
         CLOSE C_REQUIREMENT_1;
         END IF;
       END IF;
       --DBMS_OUTPUT.PUT_LINE(BODYTEXT);
      CLOSE C_REQUIREMENT;
 EXCEPTION
      WHEN OTHERS THEN
        L_ERRORMSG := SQLCODE;
        L_EMAILSENT := FALSE;
        INSERT INTO CMS_EMAIL_HISTORY(EMAIL_TYPE_ID,SEQ_NOTE,ORIGINAL_TABLE,ORIGINAL_ID,CREATED_ON,QMAIL_ID)
                  VALUES(l_EMAIL_TYPE_ID,L_ERRORMSG,'CMS_EMAIL_REMINDER_DELIV_PROC',0,SYSDATE,NULL);
  END CMS_EMAIL_REMINDER_DELIV_PROC;


END CMS_EMAIL_NOTIFICATION_PKG;

/
